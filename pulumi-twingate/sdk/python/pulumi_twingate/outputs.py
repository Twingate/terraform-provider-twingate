# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'TwingateResourceAccess',
    'TwingateResourceProtocols',
    'TwingateResourceProtocolsTcp',
    'TwingateResourceProtocolsUdp',
    'GetTwingateConnectorsConnectorResult',
    'GetTwingateGroupsGroupResult',
    'GetTwingateRemoteNetworksRemoteNetworkResult',
    'GetTwingateResourceProtocolsResult',
    'GetTwingateResourceProtocolsTcpResult',
    'GetTwingateResourceProtocolsUdpResult',
    'GetTwingateResourcesResourceResult',
    'GetTwingateResourcesResourceProtocolsResult',
    'GetTwingateResourcesResourceProtocolsTcpResult',
    'GetTwingateResourcesResourceProtocolsUdpResult',
    'GetTwingateSecurityPoliciesSecurityPolicyResult',
    'GetTwingateServiceAccountsServiceAccountResult',
    'GetTwingateUsersUserResult',
]

@pulumi.output_type
class TwingateResourceAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupIds":
            suggest = "group_ids"
        elif key == "serviceAccountIds":
            suggest = "service_account_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateResourceAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateResourceAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateResourceAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_ids: Optional[Sequence[str]] = None,
                 service_account_ids: Optional[Sequence[str]] = None):
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if service_account_ids is not None:
            pulumi.set(__self__, "service_account_ids", service_account_ids)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="serviceAccountIds")
    def service_account_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "service_account_ids")


@pulumi.output_type
class TwingateResourceProtocols(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowIcmp":
            suggest = "allow_icmp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateResourceProtocols. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateResourceProtocols.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateResourceProtocols.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_icmp: Optional[bool] = None,
                 tcp: Optional['outputs.TwingateResourceProtocolsTcp'] = None,
                 udp: Optional['outputs.TwingateResourceProtocolsUdp'] = None):
        if allow_icmp is not None:
            pulumi.set(__self__, "allow_icmp", allow_icmp)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> Optional[bool]:
        return pulumi.get(self, "allow_icmp")

    @property
    @pulumi.getter
    def tcp(self) -> Optional['outputs.TwingateResourceProtocolsTcp']:
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> Optional['outputs.TwingateResourceProtocolsUdp']:
        return pulumi.get(self, "udp")


@pulumi.output_type
class TwingateResourceProtocolsTcp(dict):
    def __init__(__self__, *,
                 policy: Optional[str] = None,
                 ports: Optional[Sequence[str]] = None):
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class TwingateResourceProtocolsUdp(dict):
    def __init__(__self__, *,
                 policy: Optional[str] = None,
                 ports: Optional[Sequence[str]] = None):
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateConnectorsConnectorResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 remote_network_id: str,
                 status_updates_enabled: bool):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remote_network_id", remote_network_id)
        pulumi.set(__self__, "status_updates_enabled", status_updates_enabled)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteNetworkId")
    def remote_network_id(self) -> str:
        return pulumi.get(self, "remote_network_id")

    @property
    @pulumi.getter(name="statusUpdatesEnabled")
    def status_updates_enabled(self) -> bool:
        return pulumi.get(self, "status_updates_enabled")


@pulumi.output_type
class GetTwingateGroupsGroupResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_active: bool,
                 name: str,
                 security_policy_id: str,
                 type: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "security_policy_id", security_policy_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> str:
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTwingateRemoteNetworksRemoteNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 location: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTwingateResourceProtocolsResult(dict):
    def __init__(__self__, *,
                 allow_icmp: bool,
                 tcp: Optional['outputs.GetTwingateResourceProtocolsTcpResult'] = None,
                 udp: Optional['outputs.GetTwingateResourceProtocolsUdpResult'] = None):
        pulumi.set(__self__, "allow_icmp", allow_icmp)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> bool:
        return pulumi.get(self, "allow_icmp")

    @property
    @pulumi.getter
    def tcp(self) -> Optional['outputs.GetTwingateResourceProtocolsTcpResult']:
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> Optional['outputs.GetTwingateResourceProtocolsUdpResult']:
        return pulumi.get(self, "udp")


@pulumi.output_type
class GetTwingateResourceProtocolsTcpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourceProtocolsUdpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourcesResourceResult(dict):
    def __init__(__self__, *,
                 address: str,
                 id: str,
                 name: str,
                 protocols: 'outputs.GetTwingateResourcesResourceProtocolsResult',
                 remote_network_id: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "remote_network_id", remote_network_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocols(self) -> 'outputs.GetTwingateResourcesResourceProtocolsResult':
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="remoteNetworkId")
    def remote_network_id(self) -> str:
        return pulumi.get(self, "remote_network_id")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolsResult(dict):
    def __init__(__self__, *,
                 allow_icmp: bool,
                 tcp: 'outputs.GetTwingateResourcesResourceProtocolsTcpResult',
                 udp: 'outputs.GetTwingateResourcesResourceProtocolsUdpResult'):
        pulumi.set(__self__, "allow_icmp", allow_icmp)
        pulumi.set(__self__, "tcp", tcp)
        pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> bool:
        return pulumi.get(self, "allow_icmp")

    @property
    @pulumi.getter
    def tcp(self) -> 'outputs.GetTwingateResourcesResourceProtocolsTcpResult':
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> 'outputs.GetTwingateResourcesResourceProtocolsUdpResult':
        return pulumi.get(self, "udp")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolsTcpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolsUdpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateSecurityPoliciesSecurityPolicyResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTwingateServiceAccountsServiceAccountResult(dict):
    def __init__(__self__, *,
                 id: str,
                 key_ids: Sequence[str],
                 name: str,
                 resource_ids: Sequence[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_ids", key_ids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_ids", resource_ids)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Sequence[str]:
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Sequence[str]:
        return pulumi.get(self, "resource_ids")


@pulumi.output_type
class GetTwingateUsersUserResult(dict):
    def __init__(__self__, *,
                 email: str,
                 first_name: str,
                 id: str,
                 is_admin: bool,
                 last_name: str,
                 role: str,
                 type: str):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_admin", is_admin)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAdmin")
    def is_admin(self) -> bool:
        warnings.warn("""This read-only Boolean value will be deprecated in a future release. You may use the `role` value instead.""", DeprecationWarning)
        pulumi.log.warn("""is_admin is deprecated: This read-only Boolean value will be deprecated in a future release. You may use the `role` value instead.""")

        return pulumi.get(self, "is_admin")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


