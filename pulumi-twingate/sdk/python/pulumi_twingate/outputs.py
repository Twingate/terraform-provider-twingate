# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'TwingateResourceProtocols',
    'TwingateResourceProtocolsTcp',
    'TwingateResourceProtocolsUdp',
    'GetTwingateConnectorsConnectorResult',
    'GetTwingateGroupsGroupResult',
    'GetTwingateResourceProtocolResult',
    'GetTwingateResourceProtocolTcpResult',
    'GetTwingateResourceProtocolUdpResult',
    'GetTwingateResourcesResourceResult',
    'GetTwingateResourcesResourceProtocolResult',
    'GetTwingateResourcesResourceProtocolTcpResult',
    'GetTwingateResourcesResourceProtocolUdpResult',
    'GetTwingateUsersUserResult',
]

@pulumi.output_type
class TwingateResourceProtocols(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowIcmp":
            suggest = "allow_icmp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateResourceProtocols. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateResourceProtocols.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateResourceProtocols.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tcp: 'outputs.TwingateResourceProtocolsTcp',
                 udp: 'outputs.TwingateResourceProtocolsUdp',
                 allow_icmp: Optional[bool] = None):
        pulumi.set(__self__, "tcp", tcp)
        pulumi.set(__self__, "udp", udp)
        if allow_icmp is not None:
            pulumi.set(__self__, "allow_icmp", allow_icmp)

    @property
    @pulumi.getter
    def tcp(self) -> 'outputs.TwingateResourceProtocolsTcp':
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> 'outputs.TwingateResourceProtocolsUdp':
        return pulumi.get(self, "udp")

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> Optional[bool]:
        return pulumi.get(self, "allow_icmp")


@pulumi.output_type
class TwingateResourceProtocolsTcp(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "policy", policy)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class TwingateResourceProtocolsUdp(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "policy", policy)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateConnectorsConnectorResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 remote_network_id: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remote_network_id", remote_network_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteNetworkId")
    def remote_network_id(self) -> str:
        return pulumi.get(self, "remote_network_id")


@pulumi.output_type
class GetTwingateGroupsGroupResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_active: bool,
                 name: str,
                 type: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTwingateResourceProtocolResult(dict):
    def __init__(__self__, *,
                 allow_icmp: bool,
                 tcps: Optional[Sequence['outputs.GetTwingateResourceProtocolTcpResult']] = None,
                 udps: Optional[Sequence['outputs.GetTwingateResourceProtocolUdpResult']] = None):
        pulumi.set(__self__, "allow_icmp", allow_icmp)
        if tcps is not None:
            pulumi.set(__self__, "tcps", tcps)
        if udps is not None:
            pulumi.set(__self__, "udps", udps)

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> bool:
        return pulumi.get(self, "allow_icmp")

    @property
    @pulumi.getter
    def tcps(self) -> Optional[Sequence['outputs.GetTwingateResourceProtocolTcpResult']]:
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Optional[Sequence['outputs.GetTwingateResourceProtocolUdpResult']]:
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetTwingateResourceProtocolTcpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourceProtocolUdpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourcesResourceResult(dict):
    def __init__(__self__, *,
                 address: str,
                 id: str,
                 name: str,
                 remote_network_id: str,
                 protocols: Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolResult']] = None):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remote_network_id", remote_network_id)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteNetworkId")
    def remote_network_id(self) -> str:
        return pulumi.get(self, "remote_network_id")

    @property
    @pulumi.getter
    def protocols(self) -> Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolResult']]:
        return pulumi.get(self, "protocols")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolResult(dict):
    def __init__(__self__, *,
                 allow_icmp: bool,
                 tcps: Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolTcpResult']] = None,
                 udps: Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolUdpResult']] = None):
        pulumi.set(__self__, "allow_icmp", allow_icmp)
        if tcps is not None:
            pulumi.set(__self__, "tcps", tcps)
        if udps is not None:
            pulumi.set(__self__, "udps", udps)

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> bool:
        return pulumi.get(self, "allow_icmp")

    @property
    @pulumi.getter
    def tcps(self) -> Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolTcpResult']]:
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolUdpResult']]:
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolTcpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolUdpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateUsersUserResult(dict):
    def __init__(__self__, *,
                 email: str,
                 first_name: str,
                 id: str,
                 is_admin: bool,
                 last_name: str,
                 role: str):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_admin", is_admin)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAdmin")
    def is_admin(self) -> bool:
        return pulumi.get(self, "is_admin")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")


