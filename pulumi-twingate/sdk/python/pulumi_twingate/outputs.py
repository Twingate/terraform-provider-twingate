# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'TwingateResourceAccess',
    'TwingateResourceProtocols',
    'TwingateResourceProtocolsTcp',
    'TwingateResourceProtocolsUdp',
    'GetTwingateConnectorsConnectorResult',
    'GetTwingateGroupsGroupResult',
    'GetTwingateRemoteNetworksRemoteNetworkResult',
    'GetTwingateResourceProtocolResult',
    'GetTwingateResourceProtocolTcpResult',
    'GetTwingateResourceProtocolUdpResult',
    'GetTwingateResourcesResourceResult',
    'GetTwingateResourcesResourceProtocolResult',
    'GetTwingateResourcesResourceProtocolTcpResult',
    'GetTwingateResourcesResourceProtocolUdpResult',
    'GetTwingateSecurityPoliciesSecurityPolicyResult',
    'GetTwingateServiceAccountsServiceAccountResult',
    'GetTwingateUsersUserResult',
]

@pulumi.output_type
class TwingateResourceAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupIds":
            suggest = "group_ids"
        elif key == "serviceAccountIds":
            suggest = "service_account_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateResourceAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateResourceAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateResourceAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_ids: Optional[Sequence[str]] = None,
                 service_account_ids: Optional[Sequence[str]] = None):
        TwingateResourceAccess._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_ids=group_ids,
            service_account_ids=service_account_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_ids: Optional[Sequence[str]] = None,
             service_account_ids: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if group_ids is not None:
            _setter("group_ids", group_ids)
        if service_account_ids is not None:
            _setter("service_account_ids", service_account_ids)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="serviceAccountIds")
    def service_account_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "service_account_ids")


@pulumi.output_type
class TwingateResourceProtocols(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowIcmp":
            suggest = "allow_icmp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateResourceProtocols. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateResourceProtocols.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateResourceProtocols.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tcp: 'outputs.TwingateResourceProtocolsTcp',
                 udp: 'outputs.TwingateResourceProtocolsUdp',
                 allow_icmp: Optional[bool] = None):
        TwingateResourceProtocols._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tcp=tcp,
            udp=udp,
            allow_icmp=allow_icmp,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tcp: 'outputs.TwingateResourceProtocolsTcp',
             udp: 'outputs.TwingateResourceProtocolsUdp',
             allow_icmp: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("tcp", tcp)
        _setter("udp", udp)
        if allow_icmp is not None:
            _setter("allow_icmp", allow_icmp)

    @property
    @pulumi.getter
    def tcp(self) -> 'outputs.TwingateResourceProtocolsTcp':
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> 'outputs.TwingateResourceProtocolsUdp':
        return pulumi.get(self, "udp")

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> Optional[bool]:
        return pulumi.get(self, "allow_icmp")


@pulumi.output_type
class TwingateResourceProtocolsTcp(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Optional[Sequence[str]] = None):
        TwingateResourceProtocolsTcp._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy=policy,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy: str,
             ports: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("policy", policy)
        if ports is not None:
            _setter("ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class TwingateResourceProtocolsUdp(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Optional[Sequence[str]] = None):
        TwingateResourceProtocolsUdp._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy=policy,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy: str,
             ports: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("policy", policy)
        if ports is not None:
            _setter("ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateConnectorsConnectorResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 remote_network_id: str,
                 status_updates_enabled: bool):
        GetTwingateConnectorsConnectorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            remote_network_id=remote_network_id,
            status_updates_enabled=status_updates_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             name: str,
             remote_network_id: str,
             status_updates_enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)
        _setter("remote_network_id", remote_network_id)
        _setter("status_updates_enabled", status_updates_enabled)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteNetworkId")
    def remote_network_id(self) -> str:
        return pulumi.get(self, "remote_network_id")

    @property
    @pulumi.getter(name="statusUpdatesEnabled")
    def status_updates_enabled(self) -> bool:
        return pulumi.get(self, "status_updates_enabled")


@pulumi.output_type
class GetTwingateGroupsGroupResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_active: bool,
                 name: str,
                 security_policy_id: str,
                 type: str):
        GetTwingateGroupsGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            is_active=is_active,
            name=name,
            security_policy_id=security_policy_id,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             is_active: bool,
             name: str,
             security_policy_id: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("is_active", is_active)
        _setter("name", name)
        _setter("security_policy_id", security_policy_id)
        _setter("type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> str:
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTwingateRemoteNetworksRemoteNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 location: str,
                 name: str):
        GetTwingateRemoteNetworksRemoteNetworkResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            location=location,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             location: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("location", location)
        _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTwingateResourceProtocolResult(dict):
    def __init__(__self__, *,
                 allow_icmp: bool,
                 tcps: Optional[Sequence['outputs.GetTwingateResourceProtocolTcpResult']] = None,
                 udps: Optional[Sequence['outputs.GetTwingateResourceProtocolUdpResult']] = None):
        GetTwingateResourceProtocolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_icmp=allow_icmp,
            tcps=tcps,
            udps=udps,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_icmp: bool,
             tcps: Optional[Sequence['outputs.GetTwingateResourceProtocolTcpResult']] = None,
             udps: Optional[Sequence['outputs.GetTwingateResourceProtocolUdpResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allow_icmp", allow_icmp)
        if tcps is not None:
            _setter("tcps", tcps)
        if udps is not None:
            _setter("udps", udps)

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> bool:
        return pulumi.get(self, "allow_icmp")

    @property
    @pulumi.getter
    def tcps(self) -> Optional[Sequence['outputs.GetTwingateResourceProtocolTcpResult']]:
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Optional[Sequence['outputs.GetTwingateResourceProtocolUdpResult']]:
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetTwingateResourceProtocolTcpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        GetTwingateResourceProtocolTcpResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy=policy,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy: str,
             ports: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("policy", policy)
        _setter("ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourceProtocolUdpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        GetTwingateResourceProtocolUdpResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy=policy,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy: str,
             ports: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("policy", policy)
        _setter("ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourcesResourceResult(dict):
    def __init__(__self__, *,
                 address: str,
                 id: str,
                 name: str,
                 remote_network_id: str,
                 protocols: Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolResult']] = None):
        GetTwingateResourcesResourceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            id=id,
            name=name,
            remote_network_id=remote_network_id,
            protocols=protocols,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: str,
             id: str,
             name: str,
             remote_network_id: str,
             protocols: Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("address", address)
        _setter("id", id)
        _setter("name", name)
        _setter("remote_network_id", remote_network_id)
        if protocols is not None:
            _setter("protocols", protocols)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteNetworkId")
    def remote_network_id(self) -> str:
        return pulumi.get(self, "remote_network_id")

    @property
    @pulumi.getter
    def protocols(self) -> Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolResult']]:
        return pulumi.get(self, "protocols")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolResult(dict):
    def __init__(__self__, *,
                 allow_icmp: bool,
                 tcps: Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolTcpResult']] = None,
                 udps: Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolUdpResult']] = None):
        GetTwingateResourcesResourceProtocolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_icmp=allow_icmp,
            tcps=tcps,
            udps=udps,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_icmp: bool,
             tcps: Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolTcpResult']] = None,
             udps: Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolUdpResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allow_icmp", allow_icmp)
        if tcps is not None:
            _setter("tcps", tcps)
        if udps is not None:
            _setter("udps", udps)

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> bool:
        return pulumi.get(self, "allow_icmp")

    @property
    @pulumi.getter
    def tcps(self) -> Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolTcpResult']]:
        return pulumi.get(self, "tcps")

    @property
    @pulumi.getter
    def udps(self) -> Optional[Sequence['outputs.GetTwingateResourcesResourceProtocolUdpResult']]:
        return pulumi.get(self, "udps")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolTcpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        GetTwingateResourcesResourceProtocolTcpResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy=policy,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy: str,
             ports: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("policy", policy)
        _setter("ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolUdpResult(dict):
    def __init__(__self__, *,
                 policy: str,
                 ports: Sequence[str]):
        GetTwingateResourcesResourceProtocolUdpResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy=policy,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy: str,
             ports: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("policy", policy)
        _setter("ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> str:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[str]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateSecurityPoliciesSecurityPolicyResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str):
        GetTwingateSecurityPoliciesSecurityPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTwingateServiceAccountsServiceAccountResult(dict):
    def __init__(__self__, *,
                 id: str,
                 key_ids: Sequence[str],
                 name: str,
                 resource_ids: Sequence[str]):
        GetTwingateServiceAccountsServiceAccountResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            key_ids=key_ids,
            name=name,
            resource_ids=resource_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             key_ids: Sequence[str],
             name: str,
             resource_ids: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("key_ids", key_ids)
        _setter("name", name)
        _setter("resource_ids", resource_ids)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Sequence[str]:
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Sequence[str]:
        return pulumi.get(self, "resource_ids")


@pulumi.output_type
class GetTwingateUsersUserResult(dict):
    def __init__(__self__, *,
                 email: str,
                 first_name: str,
                 id: str,
                 is_admin: bool,
                 last_name: str,
                 role: str,
                 type: str):
        GetTwingateUsersUserResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            first_name=first_name,
            id=id,
            is_admin=is_admin,
            last_name=last_name,
            role=role,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: str,
             first_name: str,
             id: str,
             is_admin: bool,
             last_name: str,
             role: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("email", email)
        _setter("first_name", first_name)
        _setter("id", id)
        _setter("is_admin", is_admin)
        _setter("last_name", last_name)
        _setter("role", role)
        _setter("type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAdmin")
    def is_admin(self) -> bool:
        warnings.warn("""This read-only Boolean value will be deprecated in a future release. You may use the `role` value instead.""", DeprecationWarning)
        pulumi.log.warn("""is_admin is deprecated: This read-only Boolean value will be deprecated in a future release. You may use the `role` value instead.""")

        return pulumi.get(self, "is_admin")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


