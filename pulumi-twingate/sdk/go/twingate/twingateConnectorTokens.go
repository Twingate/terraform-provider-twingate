// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package twingate

import (
	"context"
	"reflect"

	"errors"
	"github.com/Twingate-Labs/pulumi-twingate/sdk/go/twingate/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type TwingateConnectorTokens struct {
	pulumi.CustomResourceState

	// The Access Token of the parent Connector
	AccessToken pulumi.StringOutput `pulumi:"accessToken"`
	// The ID of the parent Connector
	ConnectorId pulumi.StringOutput `pulumi:"connectorId"`
	// Arbitrary map of values that, when changed, will trigger recreation of resource. Use this to automatically rotate
	// Connector tokens on a schedule.
	Keepers pulumi.MapOutput `pulumi:"keepers"`
	// The Refresh Token of the parent Connector
	RefreshToken pulumi.StringOutput `pulumi:"refreshToken"`
}

// NewTwingateConnectorTokens registers a new resource with the given unique name, arguments, and options.
func NewTwingateConnectorTokens(ctx *pulumi.Context,
	name string, args *TwingateConnectorTokensArgs, opts ...pulumi.ResourceOption) (*TwingateConnectorTokens, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessToken",
		"refreshToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TwingateConnectorTokens
	err := ctx.RegisterResource("twingate:index/twingateConnectorTokens:TwingateConnectorTokens", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTwingateConnectorTokens gets an existing TwingateConnectorTokens resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTwingateConnectorTokens(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TwingateConnectorTokensState, opts ...pulumi.ResourceOption) (*TwingateConnectorTokens, error) {
	var resource TwingateConnectorTokens
	err := ctx.ReadResource("twingate:index/twingateConnectorTokens:TwingateConnectorTokens", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TwingateConnectorTokens resources.
type twingateConnectorTokensState struct {
	// The Access Token of the parent Connector
	AccessToken *string `pulumi:"accessToken"`
	// The ID of the parent Connector
	ConnectorId *string `pulumi:"connectorId"`
	// Arbitrary map of values that, when changed, will trigger recreation of resource. Use this to automatically rotate
	// Connector tokens on a schedule.
	Keepers map[string]interface{} `pulumi:"keepers"`
	// The Refresh Token of the parent Connector
	RefreshToken *string `pulumi:"refreshToken"`
}

type TwingateConnectorTokensState struct {
	// The Access Token of the parent Connector
	AccessToken pulumi.StringPtrInput
	// The ID of the parent Connector
	ConnectorId pulumi.StringPtrInput
	// Arbitrary map of values that, when changed, will trigger recreation of resource. Use this to automatically rotate
	// Connector tokens on a schedule.
	Keepers pulumi.MapInput
	// The Refresh Token of the parent Connector
	RefreshToken pulumi.StringPtrInput
}

func (TwingateConnectorTokensState) ElementType() reflect.Type {
	return reflect.TypeOf((*twingateConnectorTokensState)(nil)).Elem()
}

type twingateConnectorTokensArgs struct {
	// The ID of the parent Connector
	ConnectorId string `pulumi:"connectorId"`
	// Arbitrary map of values that, when changed, will trigger recreation of resource. Use this to automatically rotate
	// Connector tokens on a schedule.
	Keepers map[string]interface{} `pulumi:"keepers"`
}

// The set of arguments for constructing a TwingateConnectorTokens resource.
type TwingateConnectorTokensArgs struct {
	// The ID of the parent Connector
	ConnectorId pulumi.StringInput
	// Arbitrary map of values that, when changed, will trigger recreation of resource. Use this to automatically rotate
	// Connector tokens on a schedule.
	Keepers pulumi.MapInput
}

func (TwingateConnectorTokensArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*twingateConnectorTokensArgs)(nil)).Elem()
}

type TwingateConnectorTokensInput interface {
	pulumi.Input

	ToTwingateConnectorTokensOutput() TwingateConnectorTokensOutput
	ToTwingateConnectorTokensOutputWithContext(ctx context.Context) TwingateConnectorTokensOutput
}

func (*TwingateConnectorTokens) ElementType() reflect.Type {
	return reflect.TypeOf((**TwingateConnectorTokens)(nil)).Elem()
}

func (i *TwingateConnectorTokens) ToTwingateConnectorTokensOutput() TwingateConnectorTokensOutput {
	return i.ToTwingateConnectorTokensOutputWithContext(context.Background())
}

func (i *TwingateConnectorTokens) ToTwingateConnectorTokensOutputWithContext(ctx context.Context) TwingateConnectorTokensOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwingateConnectorTokensOutput)
}

func (i *TwingateConnectorTokens) ToOutput(ctx context.Context) pulumix.Output[*TwingateConnectorTokens] {
	return pulumix.Output[*TwingateConnectorTokens]{
		OutputState: i.ToTwingateConnectorTokensOutputWithContext(ctx).OutputState,
	}
}

// TwingateConnectorTokensArrayInput is an input type that accepts TwingateConnectorTokensArray and TwingateConnectorTokensArrayOutput values.
// You can construct a concrete instance of `TwingateConnectorTokensArrayInput` via:
//
//	TwingateConnectorTokensArray{ TwingateConnectorTokensArgs{...} }
type TwingateConnectorTokensArrayInput interface {
	pulumi.Input

	ToTwingateConnectorTokensArrayOutput() TwingateConnectorTokensArrayOutput
	ToTwingateConnectorTokensArrayOutputWithContext(context.Context) TwingateConnectorTokensArrayOutput
}

type TwingateConnectorTokensArray []TwingateConnectorTokensInput

func (TwingateConnectorTokensArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TwingateConnectorTokens)(nil)).Elem()
}

func (i TwingateConnectorTokensArray) ToTwingateConnectorTokensArrayOutput() TwingateConnectorTokensArrayOutput {
	return i.ToTwingateConnectorTokensArrayOutputWithContext(context.Background())
}

func (i TwingateConnectorTokensArray) ToTwingateConnectorTokensArrayOutputWithContext(ctx context.Context) TwingateConnectorTokensArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwingateConnectorTokensArrayOutput)
}

func (i TwingateConnectorTokensArray) ToOutput(ctx context.Context) pulumix.Output[[]*TwingateConnectorTokens] {
	return pulumix.Output[[]*TwingateConnectorTokens]{
		OutputState: i.ToTwingateConnectorTokensArrayOutputWithContext(ctx).OutputState,
	}
}

// TwingateConnectorTokensMapInput is an input type that accepts TwingateConnectorTokensMap and TwingateConnectorTokensMapOutput values.
// You can construct a concrete instance of `TwingateConnectorTokensMapInput` via:
//
//	TwingateConnectorTokensMap{ "key": TwingateConnectorTokensArgs{...} }
type TwingateConnectorTokensMapInput interface {
	pulumi.Input

	ToTwingateConnectorTokensMapOutput() TwingateConnectorTokensMapOutput
	ToTwingateConnectorTokensMapOutputWithContext(context.Context) TwingateConnectorTokensMapOutput
}

type TwingateConnectorTokensMap map[string]TwingateConnectorTokensInput

func (TwingateConnectorTokensMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TwingateConnectorTokens)(nil)).Elem()
}

func (i TwingateConnectorTokensMap) ToTwingateConnectorTokensMapOutput() TwingateConnectorTokensMapOutput {
	return i.ToTwingateConnectorTokensMapOutputWithContext(context.Background())
}

func (i TwingateConnectorTokensMap) ToTwingateConnectorTokensMapOutputWithContext(ctx context.Context) TwingateConnectorTokensMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwingateConnectorTokensMapOutput)
}

func (i TwingateConnectorTokensMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TwingateConnectorTokens] {
	return pulumix.Output[map[string]*TwingateConnectorTokens]{
		OutputState: i.ToTwingateConnectorTokensMapOutputWithContext(ctx).OutputState,
	}
}

type TwingateConnectorTokensOutput struct{ *pulumi.OutputState }

func (TwingateConnectorTokensOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TwingateConnectorTokens)(nil)).Elem()
}

func (o TwingateConnectorTokensOutput) ToTwingateConnectorTokensOutput() TwingateConnectorTokensOutput {
	return o
}

func (o TwingateConnectorTokensOutput) ToTwingateConnectorTokensOutputWithContext(ctx context.Context) TwingateConnectorTokensOutput {
	return o
}

func (o TwingateConnectorTokensOutput) ToOutput(ctx context.Context) pulumix.Output[*TwingateConnectorTokens] {
	return pulumix.Output[*TwingateConnectorTokens]{
		OutputState: o.OutputState,
	}
}

// The Access Token of the parent Connector
func (o TwingateConnectorTokensOutput) AccessToken() pulumi.StringOutput {
	return o.ApplyT(func(v *TwingateConnectorTokens) pulumi.StringOutput { return v.AccessToken }).(pulumi.StringOutput)
}

// The ID of the parent Connector
func (o TwingateConnectorTokensOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *TwingateConnectorTokens) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

// Arbitrary map of values that, when changed, will trigger recreation of resource. Use this to automatically rotate
// Connector tokens on a schedule.
func (o TwingateConnectorTokensOutput) Keepers() pulumi.MapOutput {
	return o.ApplyT(func(v *TwingateConnectorTokens) pulumi.MapOutput { return v.Keepers }).(pulumi.MapOutput)
}

// The Refresh Token of the parent Connector
func (o TwingateConnectorTokensOutput) RefreshToken() pulumi.StringOutput {
	return o.ApplyT(func(v *TwingateConnectorTokens) pulumi.StringOutput { return v.RefreshToken }).(pulumi.StringOutput)
}

type TwingateConnectorTokensArrayOutput struct{ *pulumi.OutputState }

func (TwingateConnectorTokensArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TwingateConnectorTokens)(nil)).Elem()
}

func (o TwingateConnectorTokensArrayOutput) ToTwingateConnectorTokensArrayOutput() TwingateConnectorTokensArrayOutput {
	return o
}

func (o TwingateConnectorTokensArrayOutput) ToTwingateConnectorTokensArrayOutputWithContext(ctx context.Context) TwingateConnectorTokensArrayOutput {
	return o
}

func (o TwingateConnectorTokensArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TwingateConnectorTokens] {
	return pulumix.Output[[]*TwingateConnectorTokens]{
		OutputState: o.OutputState,
	}
}

func (o TwingateConnectorTokensArrayOutput) Index(i pulumi.IntInput) TwingateConnectorTokensOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TwingateConnectorTokens {
		return vs[0].([]*TwingateConnectorTokens)[vs[1].(int)]
	}).(TwingateConnectorTokensOutput)
}

type TwingateConnectorTokensMapOutput struct{ *pulumi.OutputState }

func (TwingateConnectorTokensMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TwingateConnectorTokens)(nil)).Elem()
}

func (o TwingateConnectorTokensMapOutput) ToTwingateConnectorTokensMapOutput() TwingateConnectorTokensMapOutput {
	return o
}

func (o TwingateConnectorTokensMapOutput) ToTwingateConnectorTokensMapOutputWithContext(ctx context.Context) TwingateConnectorTokensMapOutput {
	return o
}

func (o TwingateConnectorTokensMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TwingateConnectorTokens] {
	return pulumix.Output[map[string]*TwingateConnectorTokens]{
		OutputState: o.OutputState,
	}
}

func (o TwingateConnectorTokensMapOutput) MapIndex(k pulumi.StringInput) TwingateConnectorTokensOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TwingateConnectorTokens {
		return vs[0].(map[string]*TwingateConnectorTokens)[vs[1].(string)]
	}).(TwingateConnectorTokensOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TwingateConnectorTokensInput)(nil)).Elem(), &TwingateConnectorTokens{})
	pulumi.RegisterInputType(reflect.TypeOf((*TwingateConnectorTokensArrayInput)(nil)).Elem(), TwingateConnectorTokensArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TwingateConnectorTokensMapInput)(nil)).Elem(), TwingateConnectorTokensMap{})
	pulumi.RegisterOutputType(TwingateConnectorTokensOutput{})
	pulumi.RegisterOutputType(TwingateConnectorTokensArrayOutput{})
	pulumi.RegisterOutputType(TwingateConnectorTokensMapOutput{})
}
