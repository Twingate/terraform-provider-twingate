// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Groups are how users are authorized to access Resources. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/groups).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as twingate from "@pulumi/twingate";
 *
 * const foo = twingate.getTwingateGroups({
 *     name: "<your group's name>",
 * });
 * ```
 */
export function getTwingateGroups(args?: GetTwingateGroupsArgs, opts?: pulumi.InvokeOptions): Promise<GetTwingateGroupsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("twingate:index/getTwingateGroups:getTwingateGroups", {
        "groups": args.groups,
        "isActive": args.isActive,
        "name": args.name,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getTwingateGroups.
 */
export interface GetTwingateGroupsArgs {
    /**
     * List of Groups
     */
    groups?: inputs.GetTwingateGroupsGroup[];
    /**
     * Returns only Groups matching the specified state.
     */
    isActive?: boolean;
    /**
     * Returns only Groups that exactly match this name.
     */
    name?: string;
    /**
     * Returns only Groups of the specified type (valid: `MANUAL`, `SYNCED`, `SYSTEM`).
     */
    type?: string;
}

/**
 * A collection of values returned by getTwingateGroups.
 */
export interface GetTwingateGroupsResult {
    /**
     * List of Groups
     */
    readonly groups?: outputs.GetTwingateGroupsGroup[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Returns only Groups matching the specified state.
     */
    readonly isActive?: boolean;
    /**
     * Returns only Groups that exactly match this name.
     */
    readonly name?: string;
    /**
     * Returns only Groups of the specified type (valid: `MANUAL`, `SYNCED`, `SYSTEM`).
     */
    readonly type?: string;
}
/**
 * Groups are how users are authorized to access Resources. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/groups).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as twingate from "@pulumi/twingate";
 *
 * const foo = twingate.getTwingateGroups({
 *     name: "<your group's name>",
 * });
 * ```
 */
export function getTwingateGroupsOutput(args?: GetTwingateGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTwingateGroupsResult> {
    return pulumi.output(args).apply((a: any) => getTwingateGroups(a, opts))
}

/**
 * A collection of arguments for invoking getTwingateGroups.
 */
export interface GetTwingateGroupsOutputArgs {
    /**
     * List of Groups
     */
    groups?: pulumi.Input<pulumi.Input<inputs.GetTwingateGroupsGroupArgs>[]>;
    /**
     * Returns only Groups matching the specified state.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Returns only Groups that exactly match this name.
     */
    name?: pulumi.Input<string>;
    /**
     * Returns only Groups of the specified type (valid: `MANUAL`, `SYNCED`, `SYSTEM`).
     */
    type?: pulumi.Input<string>;
}
