// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetTwingateConnectorArgs, GetTwingateConnectorResult, GetTwingateConnectorOutputArgs } from "./getTwingateConnector";
export const getTwingateConnector: typeof import("./getTwingateConnector").getTwingateConnector = null as any;
export const getTwingateConnectorOutput: typeof import("./getTwingateConnector").getTwingateConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateConnector","getTwingateConnectorOutput"], () => require("./getTwingateConnector"));

export { GetTwingateConnectorsArgs, GetTwingateConnectorsResult, GetTwingateConnectorsOutputArgs } from "./getTwingateConnectors";
export const getTwingateConnectors: typeof import("./getTwingateConnectors").getTwingateConnectors = null as any;
export const getTwingateConnectorsOutput: typeof import("./getTwingateConnectors").getTwingateConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateConnectors","getTwingateConnectorsOutput"], () => require("./getTwingateConnectors"));

export { GetTwingateGroupArgs, GetTwingateGroupResult, GetTwingateGroupOutputArgs } from "./getTwingateGroup";
export const getTwingateGroup: typeof import("./getTwingateGroup").getTwingateGroup = null as any;
export const getTwingateGroupOutput: typeof import("./getTwingateGroup").getTwingateGroupOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateGroup","getTwingateGroupOutput"], () => require("./getTwingateGroup"));

export { GetTwingateGroupsArgs, GetTwingateGroupsResult, GetTwingateGroupsOutputArgs } from "./getTwingateGroups";
export const getTwingateGroups: typeof import("./getTwingateGroups").getTwingateGroups = null as any;
export const getTwingateGroupsOutput: typeof import("./getTwingateGroups").getTwingateGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateGroups","getTwingateGroupsOutput"], () => require("./getTwingateGroups"));

export { GetTwingateRemoteNetworkArgs, GetTwingateRemoteNetworkResult, GetTwingateRemoteNetworkOutputArgs } from "./getTwingateRemoteNetwork";
export const getTwingateRemoteNetwork: typeof import("./getTwingateRemoteNetwork").getTwingateRemoteNetwork = null as any;
export const getTwingateRemoteNetworkOutput: typeof import("./getTwingateRemoteNetwork").getTwingateRemoteNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateRemoteNetwork","getTwingateRemoteNetworkOutput"], () => require("./getTwingateRemoteNetwork"));

export { GetTwingateRemoteNetworksArgs, GetTwingateRemoteNetworksResult, GetTwingateRemoteNetworksOutputArgs } from "./getTwingateRemoteNetworks";
export const getTwingateRemoteNetworks: typeof import("./getTwingateRemoteNetworks").getTwingateRemoteNetworks = null as any;
export const getTwingateRemoteNetworksOutput: typeof import("./getTwingateRemoteNetworks").getTwingateRemoteNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateRemoteNetworks","getTwingateRemoteNetworksOutput"], () => require("./getTwingateRemoteNetworks"));

export { GetTwingateResourceArgs, GetTwingateResourceResult, GetTwingateResourceOutputArgs } from "./getTwingateResource";
export const getTwingateResource: typeof import("./getTwingateResource").getTwingateResource = null as any;
export const getTwingateResourceOutput: typeof import("./getTwingateResource").getTwingateResourceOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateResource","getTwingateResourceOutput"], () => require("./getTwingateResource"));

export { GetTwingateResourcesArgs, GetTwingateResourcesResult, GetTwingateResourcesOutputArgs } from "./getTwingateResources";
export const getTwingateResources: typeof import("./getTwingateResources").getTwingateResources = null as any;
export const getTwingateResourcesOutput: typeof import("./getTwingateResources").getTwingateResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateResources","getTwingateResourcesOutput"], () => require("./getTwingateResources"));

export { GetTwingateSecurityPoliciesArgs, GetTwingateSecurityPoliciesResult, GetTwingateSecurityPoliciesOutputArgs } from "./getTwingateSecurityPolicies";
export const getTwingateSecurityPolicies: typeof import("./getTwingateSecurityPolicies").getTwingateSecurityPolicies = null as any;
export const getTwingateSecurityPoliciesOutput: typeof import("./getTwingateSecurityPolicies").getTwingateSecurityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateSecurityPolicies","getTwingateSecurityPoliciesOutput"], () => require("./getTwingateSecurityPolicies"));

export { GetTwingateSecurityPolicyArgs, GetTwingateSecurityPolicyResult, GetTwingateSecurityPolicyOutputArgs } from "./getTwingateSecurityPolicy";
export const getTwingateSecurityPolicy: typeof import("./getTwingateSecurityPolicy").getTwingateSecurityPolicy = null as any;
export const getTwingateSecurityPolicyOutput: typeof import("./getTwingateSecurityPolicy").getTwingateSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateSecurityPolicy","getTwingateSecurityPolicyOutput"], () => require("./getTwingateSecurityPolicy"));

export { GetTwingateServiceAccountsArgs, GetTwingateServiceAccountsResult, GetTwingateServiceAccountsOutputArgs } from "./getTwingateServiceAccounts";
export const getTwingateServiceAccounts: typeof import("./getTwingateServiceAccounts").getTwingateServiceAccounts = null as any;
export const getTwingateServiceAccountsOutput: typeof import("./getTwingateServiceAccounts").getTwingateServiceAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateServiceAccounts","getTwingateServiceAccountsOutput"], () => require("./getTwingateServiceAccounts"));

export { GetTwingateUserArgs, GetTwingateUserResult, GetTwingateUserOutputArgs } from "./getTwingateUser";
export const getTwingateUser: typeof import("./getTwingateUser").getTwingateUser = null as any;
export const getTwingateUserOutput: typeof import("./getTwingateUser").getTwingateUserOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateUser","getTwingateUserOutput"], () => require("./getTwingateUser"));

export { GetTwingateUsersArgs, GetTwingateUsersResult, GetTwingateUsersOutputArgs } from "./getTwingateUsers";
export const getTwingateUsers: typeof import("./getTwingateUsers").getTwingateUsers = null as any;
export const getTwingateUsersOutput: typeof import("./getTwingateUsers").getTwingateUsersOutput = null as any;
utilities.lazyLoad(exports, ["getTwingateUsers","getTwingateUsersOutput"], () => require("./getTwingateUsers"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TwingateConnectorArgs, TwingateConnectorState } from "./twingateConnector";
export type TwingateConnector = import("./twingateConnector").TwingateConnector;
export const TwingateConnector: typeof import("./twingateConnector").TwingateConnector = null as any;
utilities.lazyLoad(exports, ["TwingateConnector"], () => require("./twingateConnector"));

export { TwingateConnectorTokensArgs, TwingateConnectorTokensState } from "./twingateConnectorTokens";
export type TwingateConnectorTokens = import("./twingateConnectorTokens").TwingateConnectorTokens;
export const TwingateConnectorTokens: typeof import("./twingateConnectorTokens").TwingateConnectorTokens = null as any;
utilities.lazyLoad(exports, ["TwingateConnectorTokens"], () => require("./twingateConnectorTokens"));

export { TwingateGroupArgs, TwingateGroupState } from "./twingateGroup";
export type TwingateGroup = import("./twingateGroup").TwingateGroup;
export const TwingateGroup: typeof import("./twingateGroup").TwingateGroup = null as any;
utilities.lazyLoad(exports, ["TwingateGroup"], () => require("./twingateGroup"));

export { TwingateRemoteNetworkArgs, TwingateRemoteNetworkState } from "./twingateRemoteNetwork";
export type TwingateRemoteNetwork = import("./twingateRemoteNetwork").TwingateRemoteNetwork;
export const TwingateRemoteNetwork: typeof import("./twingateRemoteNetwork").TwingateRemoteNetwork = null as any;
utilities.lazyLoad(exports, ["TwingateRemoteNetwork"], () => require("./twingateRemoteNetwork"));

export { TwingateResourceArgs, TwingateResourceState } from "./twingateResource";
export type TwingateResource = import("./twingateResource").TwingateResource;
export const TwingateResource: typeof import("./twingateResource").TwingateResource = null as any;
utilities.lazyLoad(exports, ["TwingateResource"], () => require("./twingateResource"));

export { TwingateServiceAccountArgs, TwingateServiceAccountState } from "./twingateServiceAccount";
export type TwingateServiceAccount = import("./twingateServiceAccount").TwingateServiceAccount;
export const TwingateServiceAccount: typeof import("./twingateServiceAccount").TwingateServiceAccount = null as any;
utilities.lazyLoad(exports, ["TwingateServiceAccount"], () => require("./twingateServiceAccount"));

export { TwingateServiceAccountKeyArgs, TwingateServiceAccountKeyState } from "./twingateServiceAccountKey";
export type TwingateServiceAccountKey = import("./twingateServiceAccountKey").TwingateServiceAccountKey;
export const TwingateServiceAccountKey: typeof import("./twingateServiceAccountKey").TwingateServiceAccountKey = null as any;
utilities.lazyLoad(exports, ["TwingateServiceAccountKey"], () => require("./twingateServiceAccountKey"));

export { TwingateUserArgs, TwingateUserState } from "./twingateUser";
export type TwingateUser = import("./twingateUser").TwingateUser;
export const TwingateUser: typeof import("./twingateUser").TwingateUser = null as any;
utilities.lazyLoad(exports, ["TwingateUser"], () => require("./twingateUser"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "twingate:index/twingateConnector:TwingateConnector":
                return new TwingateConnector(name, <any>undefined, { urn })
            case "twingate:index/twingateConnectorTokens:TwingateConnectorTokens":
                return new TwingateConnectorTokens(name, <any>undefined, { urn })
            case "twingate:index/twingateGroup:TwingateGroup":
                return new TwingateGroup(name, <any>undefined, { urn })
            case "twingate:index/twingateRemoteNetwork:TwingateRemoteNetwork":
                return new TwingateRemoteNetwork(name, <any>undefined, { urn })
            case "twingate:index/twingateResource:TwingateResource":
                return new TwingateResource(name, <any>undefined, { urn })
            case "twingate:index/twingateServiceAccount:TwingateServiceAccount":
                return new TwingateServiceAccount(name, <any>undefined, { urn })
            case "twingate:index/twingateServiceAccountKey:TwingateServiceAccountKey":
                return new TwingateServiceAccountKey(name, <any>undefined, { urn })
            case "twingate:index/twingateUser:TwingateUser":
                return new TwingateUser(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("twingate", "index/twingateConnector", _module)
pulumi.runtime.registerResourceModule("twingate", "index/twingateConnectorTokens", _module)
pulumi.runtime.registerResourceModule("twingate", "index/twingateGroup", _module)
pulumi.runtime.registerResourceModule("twingate", "index/twingateRemoteNetwork", _module)
pulumi.runtime.registerResourceModule("twingate", "index/twingateResource", _module)
pulumi.runtime.registerResourceModule("twingate", "index/twingateServiceAccount", _module)
pulumi.runtime.registerResourceModule("twingate", "index/twingateServiceAccountKey", _module)
pulumi.runtime.registerResourceModule("twingate", "index/twingateUser", _module)
pulumi.runtime.registerResourcePackage("twingate", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:twingate") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
