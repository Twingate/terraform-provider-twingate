// Code generated by MockGen. DO NOT EDIT.
// Source: twingate/client.go

// Package mock_twingate is a generated GoMock package.
package mock_twingate

import (
	context "context"
	json "encoding/json"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	retryablehttp "github.com/hashicorp/go-retryablehttp"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(req *retryablehttp.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), req)
}

// MockGql is a mock of Gql interface.
type MockGql struct {
	ctrl     *gomock.Controller
	recorder *MockGqlMockRecorder
}

// MockGqlMockRecorder is the mock recorder for MockGql.
type MockGqlMockRecorder struct {
	mock *MockGql
}

// NewMockGql creates a new mock instance.
func NewMockGql(ctrl *gomock.Controller) *MockGql {
	mock := &MockGql{ctrl: ctrl}
	mock.recorder = &MockGqlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGql) EXPECT() *MockGqlMockRecorder {
	return m.recorder
}

// Mutate mocks base method.
func (m_2 *MockGql) Mutate(ctx context.Context, m interface{}, variables map[string]interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Mutate", ctx, m, variables)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mutate indicates an expected call of Mutate.
func (mr *MockGqlMockRecorder) Mutate(ctx, m, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutate", reflect.TypeOf((*MockGql)(nil).Mutate), ctx, m, variables)
}

// MutateRaw mocks base method.
func (m_2 *MockGql) MutateRaw(ctx context.Context, m interface{}, variables map[string]interface{}) (*json.RawMessage, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "MutateRaw", ctx, m, variables)
	ret0, _ := ret[0].(*json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MutateRaw indicates an expected call of MutateRaw.
func (mr *MockGqlMockRecorder) MutateRaw(ctx, m, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MutateRaw", reflect.TypeOf((*MockGql)(nil).MutateRaw), ctx, m, variables)
}

// NamedMutate mocks base method.
func (m_2 *MockGql) NamedMutate(ctx context.Context, name string, m interface{}, variables map[string]interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "NamedMutate", ctx, name, m, variables)
	ret0, _ := ret[0].(error)
	return ret0
}

// NamedMutate indicates an expected call of NamedMutate.
func (mr *MockGqlMockRecorder) NamedMutate(ctx, name, m, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedMutate", reflect.TypeOf((*MockGql)(nil).NamedMutate), ctx, name, m, variables)
}

// NamedMutateRaw mocks base method.
func (m_2 *MockGql) NamedMutateRaw(ctx context.Context, name string, m interface{}, variables map[string]interface{}) (*json.RawMessage, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "NamedMutateRaw", ctx, name, m, variables)
	ret0, _ := ret[0].(*json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedMutateRaw indicates an expected call of NamedMutateRaw.
func (mr *MockGqlMockRecorder) NamedMutateRaw(ctx, name, m, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedMutateRaw", reflect.TypeOf((*MockGql)(nil).NamedMutateRaw), ctx, name, m, variables)
}

// NamedQuery mocks base method.
func (m *MockGql) NamedQuery(ctx context.Context, name string, q interface{}, variables map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedQuery", ctx, name, q, variables)
	ret0, _ := ret[0].(error)
	return ret0
}

// NamedQuery indicates an expected call of NamedQuery.
func (mr *MockGqlMockRecorder) NamedQuery(ctx, name, q, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedQuery", reflect.TypeOf((*MockGql)(nil).NamedQuery), ctx, name, q, variables)
}

// NamedQueryRaw mocks base method.
func (m *MockGql) NamedQueryRaw(ctx context.Context, name string, q interface{}, variables map[string]interface{}) (*json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedQueryRaw", ctx, name, q, variables)
	ret0, _ := ret[0].(*json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedQueryRaw indicates an expected call of NamedQueryRaw.
func (mr *MockGqlMockRecorder) NamedQueryRaw(ctx, name, q, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedQueryRaw", reflect.TypeOf((*MockGql)(nil).NamedQueryRaw), ctx, name, q, variables)
}

// Query mocks base method.
func (m *MockGql) Query(ctx context.Context, q interface{}, variables map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, q, variables)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockGqlMockRecorder) Query(ctx, q, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockGql)(nil).Query), ctx, q, variables)
}

// QueryRaw mocks base method.
func (m *MockGql) QueryRaw(ctx context.Context, q interface{}, variables map[string]interface{}) (*json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRaw", ctx, q, variables)
	ret0, _ := ret[0].(*json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRaw indicates an expected call of QueryRaw.
func (mr *MockGqlMockRecorder) QueryRaw(ctx, q, variables interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRaw", reflect.TypeOf((*MockGql)(nil).QueryRaw), ctx, q, variables)
}
