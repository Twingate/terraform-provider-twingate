package resource

import (
	"context"
	"errors"
	"log"

	"github.com/Twingate/terraform-provider-twingate/twingate/internal/client"
	"github.com/Twingate/terraform-provider-twingate/twingate/internal/model"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

const (
	fieldID               = "id"
	fieldName             = "name"
	fieldStatus           = "status"
	fieldServiceAccountID = "service_account_id"
)

func ServiceAccountKey() *schema.Resource {
	return &schema.Resource{
		Description:   "Service Account Key authorizes access to all Resources assigned to the Service. For more information, see Twingate's [documentation](https://www.twingate.com/docs/services/#2-select-generate-key-to-create-a-new-service-key).",
		CreateContext: serviceAccountKeyCreate,
		ReadContext:   serviceAccountKeyRead,
		DeleteContext: serviceAccountKeyDelete,
		UpdateContext: serviceAccountKeyUpdate,

		Schema: map[string]*schema.Schema{
			fieldServiceAccountID: {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The id of the service account",
			},
			// optional
			fieldName: {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: "The name of the service account key",
			},
			// computed
			fieldID: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Autogenerated ID of the service account key",
			},
			fieldStatus: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The status of the service account key",
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func serviceAccountKeyCreate(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	serviceAccountKey, err := c.CreateServiceAccountKey(ctx, &model.ServiceAccountKey{
		ServiceAccountID: resourceData.Get(fieldServiceAccountID).(string),
		Name:             resourceData.Get(fieldName).(string),
	})
	if err != nil {
		return diag.FromErr(err)
	}

	log.Printf("[INFO] Service account key %s created with id %v", serviceAccountKey.Name, serviceAccountKey.ID)

	return serviceAccountKeyReadHelper(ctx, resourceData, serviceAccountKey, nil, meta)
}

func serviceAccountKeyUpdate(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	serviceAccountKey, err := c.UpdateServiceAccountKey(ctx,
		&model.ServiceAccountKey{
			ID:   resourceData.Id(),
			Name: resourceData.Get(fieldName).(string),
		},
	)
	if err != nil {
		return diag.FromErr(err)
	}

	log.Printf("[INFO] Updated service account key id %v", serviceAccountKey.ID)

	return serviceAccountKeyReadHelper(ctx, resourceData, serviceAccountKey, err, meta)
}

func serviceAccountKeyDelete(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	providerClient := meta.(*client.Client)

	err := providerClient.RevokeServiceAccountKey(ctx, resourceData.Id())
	if err != nil {
		return diag.FromErr(err)
	}

	err = providerClient.DeleteServiceAccountKey(ctx, resourceData.Id())
	if err != nil {
		return diag.FromErr(err)
	}

	log.Printf("[INFO] Deleted service account key id %s", resourceData.Id())

	return nil
}

func serviceAccountKeyRead(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	serviceAccountKey, err := c.ReadServiceAccountKey(ctx, resourceData.Id())

	return serviceAccountKeyReadHelper(ctx, resourceData, serviceAccountKey, err, meta)
}

func serviceAccountKeyReadHelper(ctx context.Context, resourceData *schema.ResourceData, serviceAccountKey *model.ServiceAccountKey, err error, meta interface{}) diag.Diagnostics {
	if err != nil {
		if errors.Is(err, client.ErrGraphqlResultIsEmpty) {
			// clear state
			resourceData.SetId("")

			return nil
		}

		return diag.FromErr(err)
	}

	if !serviceAccountKey.IsActive() {
		return reCreateServiceAccountKey(ctx, resourceData, meta)
	}

	if err := resourceData.Set(fieldName, serviceAccountKey.Name); err != nil {
		return diag.FromErr(err)
	}

	if err := resourceData.Set(fieldStatus, serviceAccountKey.Status); err != nil {
		return diag.FromErr(err)
	}

	if err := resourceData.Set(fieldServiceAccountID, serviceAccountKey.ServiceAccountID); err != nil {
		return diag.FromErr(err)
	}

	resourceData.SetId(serviceAccountKey.ID)

	return nil
}

func reCreateServiceAccountKey(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	err := c.DeleteServiceAccountKey(ctx, resourceData.Id())
	if err != nil {
		return diag.FromErr(err)
	}

	return serviceAccountKeyCreate(ctx, resourceData, meta)
}
