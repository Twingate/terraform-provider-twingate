package resource

import (
	"context"
	"errors"
	"log"

	"github.com/Twingate/terraform-provider-twingate/twingate/internal/transport"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func Group() *schema.Resource {
	return &schema.Resource{
		Description:   "Groups are how users are authorized to access Resources. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/groups).",
		CreateContext: groupCreate,
		ReadContext:   groupRead,
		DeleteContext: groupDelete,
		UpdateContext: groupUpdate,

		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The name of the group",
			},
			// computed
			"id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Autogenerated ID of the Resource, encoded in base64",
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func groupCreate(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*transport.Client)

	groupName := resourceData.Get("name").(string)
	group, err := client.CreateGroup(ctx, groupName)

	if err != nil {
		return diag.FromErr(err)
	}

	resourceData.SetId(group.ID)
	log.Printf("[INFO] Group %s created with id %s", groupName, resourceData.Id())

	waitForResourceAvailability()

	return groupRead(ctx, resourceData, meta)
}

func groupUpdate(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*transport.Client)

	groupName := resourceData.Get("name").(string)

	if resourceData.HasChange("name") {
		groupID := resourceData.Id()

		err := client.UpdateGroup(ctx, groupID, groupName)
		if err != nil {
			return diag.FromErr(err)
		}

		log.Printf("[INFO] Updated group id %s", groupID)
	}

	return groupRead(ctx, resourceData, meta)
}

func groupDelete(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*transport.Client)

	var diags diag.Diagnostics

	groupID := resourceData.Id()

	err := client.DeleteGroup(ctx, groupID)
	if err != nil {
		return diag.FromErr(err)
	}

	log.Printf("[INFO] Deleted group id %s", resourceData.Id())

	return diags
}

func groupRead(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*transport.Client)

	var diags diag.Diagnostics

	groupID := resourceData.Id()
	group, err := client.ReadGroup(ctx, groupID)

	if err != nil {
		if errors.Is(err, transport.ErrGraphqlResultIsEmpty) {
			// clear state
			resourceData.SetId("")

			return nil
		}

		return diag.FromErr(err)
	}

	err = resourceData.Set("name", group.Name)
	if err != nil {
		return diag.FromErr(err)
	}

	return diags
}
