package resource

import (
	"context"
	"errors"

	"github.com/Twingate/terraform-provider-twingate/twingate/internal/attr"
	"github.com/Twingate/terraform-provider-twingate/twingate/internal/client"
	"github.com/Twingate/terraform-provider-twingate/twingate/internal/model"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Ensure the implementation satisfies the desired interfaces.
var _ resource.Resource = &serviceAccount{}

func NewServiceAccountResource() resource.Resource {
	return &serviceAccount{}
}

type serviceAccount struct {
	client *client.Client
}

type serviceAccountModel struct {
	ID   types.String `tfsdk:"id"`
	Name types.String `tfsdk:"name"`
}

func (r *serviceAccount) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = TwingateServiceAccount
}

func (r *serviceAccount) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*client.Client)
}

func (r *serviceAccount) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Service Accounts offer a way to provide programmatic, centrally-controlled, and consistent access controls.",
		Attributes: map[string]schema.Attribute{
			attr.Name: schema.StringAttribute{
				Required:    true,
				Description: "The name of the Service Account in Twingate",
			},
			// computed
			attr.ID: schema.StringAttribute{
				Computed:    true,
				Description: "Autogenerated ID of the Service Account",
			},
		},
	}
}

func (r *serviceAccount) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan serviceAccountModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)

	if resp.Diagnostics.HasError() {
		return
	}

	serviceAccount, err := r.client.CreateServiceAccount(ctx, plan.Name.ValueString())

	r.helper(ctx, serviceAccount, &plan, &resp.State, &resp.Diagnostics, err, operationCreate)
}

func (r *serviceAccount) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state serviceAccountModel

	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)

	if resp.Diagnostics.HasError() {
		return
	}

	serviceAccount, err := r.client.ReadShallowServiceAccount(ctx, state.ID.ValueString())

	r.helper(ctx, serviceAccount, &state, &resp.State, &resp.Diagnostics, err, operationRead)
}

func (r *serviceAccount) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state serviceAccountModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)

	if resp.Diagnostics.HasError() {
		return
	}

	serviceAccount, err := r.client.UpdateServiceAccount(ctx,
		&model.ServiceAccount{
			ID:   state.ID.ValueString(),
			Name: plan.Name.ValueString(),
		},
	)

	r.helper(ctx, serviceAccount, &state, &resp.State, &resp.Diagnostics, err, operationUpdate)
}

func (r *serviceAccount) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state serviceAccountModel

	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)

	if resp.Diagnostics.HasError() {
		return
	}

	err := r.client.DeleteServiceAccount(ctx, state.ID.ValueString())
	addErr(&resp.Diagnostics, err, operationDelete, TwingateServiceAccount)
}

func (r *serviceAccount) helper(ctx context.Context, serviceAccount *model.ServiceAccount, state *serviceAccountModel, respState *tfsdk.State, diagnostics *diag.Diagnostics, err error, operation string) {
	if err != nil {
		if errors.Is(err, client.ErrGraphqlResultIsEmpty) {
			// clear state
			respState.RemoveResource(ctx)

			return
		}

		addErr(diagnostics, err, operation, TwingateServiceAccount)

		return
	}

	state.ID = types.StringValue(serviceAccount.ID)
	state.Name = types.StringValue(serviceAccount.Name)

	// Set refreshed state
	diags := respState.Set(ctx, state)
	diagnostics.Append(diags...)
}
