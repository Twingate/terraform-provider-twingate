package resource

import (
	"context"
	"errors"
	"log"

	"github.com/Twingate/terraform-provider-twingate/twingate/internal/attr"
	"github.com/Twingate/terraform-provider-twingate/twingate/internal/client"
	"github.com/Twingate/terraform-provider-twingate/twingate/internal/model"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func ServiceAccount() *schema.Resource {
	return &schema.Resource{
		Description:   "Service Accounts offer a way to provide programmatic, centrally-controlled, and consistent access controls.",
		CreateContext: serviceAccountCreate,
		ReadContext:   serviceAccountRead,
		DeleteContext: serviceAccountDelete,
		UpdateContext: serviceAccountUpdate,

		Schema: map[string]*schema.Schema{
			attr.Name: {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The name of the Service Account in Twingate",
			},
			// computed
			attr.ID: {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Autogenerated ID of the Service Account",
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func serviceAccountCreate(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	serviceAccount, err := c.CreateServiceAccount(ctx, resourceData.Get(attr.Name).(string))
	if err != nil {
		return diag.FromErr(err)
	}

	log.Printf("[INFO] Service account %s created with id %v", serviceAccount.Name, serviceAccount.ID)

	return serviceAccountReadHelper(resourceData, serviceAccount, nil)
}

func serviceAccountUpdate(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	group, err := c.UpdateServiceAccount(ctx,
		&model.ServiceAccount{
			ID:   resourceData.Id(),
			Name: resourceData.Get(attr.Name).(string),
		},
	)
	if err != nil {
		return diag.FromErr(err)
	}

	log.Printf("[INFO] Updated service account id %v", group.ID)

	return serviceAccountReadHelper(resourceData, group, err)
}

func serviceAccountDelete(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)

	err := c.DeleteServiceAccount(ctx, resourceData.Id())
	if err != nil {
		return diag.FromErr(err)
	}

	log.Printf("[INFO] Deleted service account id %s", resourceData.Id())

	return nil
}

func serviceAccountRead(ctx context.Context, resourceData *schema.ResourceData, meta interface{}) diag.Diagnostics {
	c := meta.(*client.Client)
	serviceAccount, err := c.ReadShallowServiceAccount(ctx, resourceData.Id())

	return serviceAccountReadHelper(resourceData, serviceAccount, err)
}

func serviceAccountReadHelper(resourceData *schema.ResourceData, serviceAccount *model.ServiceAccount, err error) diag.Diagnostics {
	if err != nil {
		if errors.Is(err, client.ErrGraphqlResultIsEmpty) {
			// clear state
			resourceData.SetId("")

			return nil
		}

		return diag.FromErr(err)
	}

	if err := resourceData.Set(attr.Name, serviceAccount.Name); err != nil {
		return ErrAttributeSet(err, attr.Name)
	}

	resourceData.SetId(serviceAccount.ID)

	return nil
}
