package twingate

import (
	"context"
	"fmt"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceConnector() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceConnectorCreate,
		ReadContext:   resourceConnectorRead,
		DeleteContext: resourceConnectorDelete,

		Schema: map[string]*schema.Schema{
			"id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Autogenerated ID of the connector in encoded in base64",
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Autogenerated  name of the connector ( cant be changed )",
			},
			"access_token": {
				Type:        schema.TypeString,
				Computed:    true,
				Sensitive:   true,
				Description: "The Access token of the connector",
			},
			"refresh_token": {
				Type:        schema.TypeString,
				Computed:    true,
				Sensitive:   true,
				Description: "The Refresh Token of the connector",
			},
			"remote_network_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The ID of the remote network to attach the connector to",
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func resourceConnectorCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	client := m.(*Client)

	var diags diag.Diagnostics

	remoteNetworkId := d.Get("remote_network_id").(string)
	connector, err := client.createConnector(&remoteNetworkId)

	if err != nil {
		return diag.FromErr(err)
	}
	err = client.populateConnectorTokens(connector)

	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(connector.Id)

	if err := d.Set("access_token", connector.AccessToken); err != nil {
		return diag.FromErr(fmt.Errorf("Error setting access_token: %s ", err))
	}
	if err := d.Set("refresh_token", connector.RefreshToken); err != nil {
		return diag.FromErr(fmt.Errorf("Error setting refresh_token: %s ", err))
	}

	log.Printf("[INFO] Created conector %s and generated tokens", connector.Name)

	resourceConnectorRead(ctx, d, m)

	return diags
}

func resourceConnectorDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	client := m.(*Client)

	var diags diag.Diagnostics

	connectorId := d.Id()

	err := client.deleteConnector(&connectorId)
	if err != nil {
		return diag.FromErr(err)
	}

	log.Printf("[INFO] Destroyed connector id %s", d.Id())

	return diags
}

func resourceConnectorRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	client := m.(*Client)

	var diags diag.Diagnostics

	connectorId := d.Id()

	connector, err := client.readConnector(&connectorId)

	if err != nil {
		return diag.FromErr(err)
	}

	if err := d.Set("name", connector.Name); err != nil {
		return diag.FromErr(fmt.Errorf("Error setting name: %s ", err))
	}

	return diags
}
