env:
  # THIS GITHUB_TOKEN IS A REQUIREMENT TO BE ABLE TO WRITE TO GH RELEASES
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # IF YOU NEED TO PUBLISH A NPM PACKAGE THEN ENSURE A NPM_TOKEN SECRET IS SET
  # AND PUBLISH_NPM: TRUE. IF YOU WANT TO PUBLISH TO A PRIVATE NPM REGISTRY
  # THEN ENSURE THE NPM_REGISTRY_URL IS CHANGED
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  PUBLISH_NPM: true
  NPM_REGISTRY_URL: https://registry.npmjs.org
  # IF YOU NEED TO PUBLISH A NUGET PACKAGE THEN ENSURE AN NUGET_PUBLISH_KEY
  # SECRET IS SET AND PUBLISH_NUGET: TRUE. IF YOU WANT TO PUBLISH TO AN ALTERNATIVE
  # NPM REGISTRY THEN ENSURE THE NPM_REGISTRY_URL IS CHANGED
  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PUBLISH_KEY }}
  NUGET_FEED_URL: https://api.nuget.org/v3/index.json
  PUBLISH_NUGET: true
  # IF YOU NEED TO PUBLISH A PYPI PACKAGE THEN ENSURE AN PYPI_API_TOKEN
  # SECRET IS SET AND PUBLISH_PYPI: TRUE. IF YOU WANT TO PUBLISH TO AN ALTERNATIVE
  # PYPI REGISTRY THEN ENSURE THE PYPI_REPOSITORY_URL IS SET. IF YOU ARE USING AN API_TOKEN THEN
  # YOU DO NOT NEED TO CHANGE THE PYPI_USERNAME (__token__) , IF YOU ARE USING PASSWORD AUTHENTICATION THEN YOU WILL
  # NEED TO CHANGE TO USE THE CORRECT PASSWORD
  PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  PYPI_USERNAME: "__token__"
  PYPI_REPOSITORY_URL: ""
  PUBLISH_PYPI: true

# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: Release
on:
  push:
    tags:
      - 'v*'
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Unshallow
        run: git fetch --prune --unshallow
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          # These secrets will need to be configured for the repository:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    publish_binary:
      name: Publish Provider Binary
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v3
        - name: Unshallow clone for tags
          run: git fetch --prune --unshallow --tags
        - name: Setup Go
          uses: actions/setup-go@v3
          with:
            go-version: '1.19'
        - name: Install pulumictl
          uses: jaxxstorm/action-install-gh-release@v1.2.0
          with:
            repo: pulumi/pulumictl
        - name: Install Pulumi CLI
          uses: pulumi/action-install-pulumi-cli@v1.0.1
        - name: Run GoReleaser
          uses: goreleaser/goreleaser-action@v2
          working-directory: pulumi-twingate
          with:
            args: -f .goreleaser.yml --rm-dist
            version: latest
    publish_sdk:
      name: Publish SDKs
      runs-on: ubuntu-latest
      needs: publish_binary
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v3
        - name: Unshallow clone for tags
          run: git fetch --prune --unshallow --tags
        - name: Install Go
          uses: actions/setup-go@v3
          with:
            go-version: ${{ matrix.goversion }}
        - name: Install pulumictl
          uses: jaxxstorm/action-install-gh-release@v1.2.0
          with:
            repo: pulumi/pulumictl
        - name: Install Pulumi CLI
          uses: pulumi/action-install-pulumi-cli@v1.0.1
        - name: Setup Node
          uses: actions/setup-node@v1
          with:
            node-version: ${{matrix.nodeversion}}
            registry-url: ${{env.NPM_REGISTRY_URL}}
        - name: Setup DotNet
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: ${{matrix.dotnetverson}}
        - name: Setup Python
          uses: actions/setup-python@v1
          with:
            python-version: ${{matrix.pythonversion}}
        - name: Build SDK
          run: make build_${{ matrix.language }}
          working-directory: pulumi-twingate
        - name: Check worktree clean
          run: |
            git update-index -q --refresh
            if ! git diff-files --quiet; then
                >&2 echo "error: working tree is not clean, aborting!"
                git status
                git diff
                exit 1
            fi
        - if: ${{ matrix.language == 'python' && env.PUBLISH_PYPI == 'true' }}
          name: Publish package to PyPI
          uses: pypa/gh-action-pypi-publish@release/v1
          working-directory: pulumi-twingate
          with:
            user: ${{ env.PYPI_USERNAME }}
            password: ${{ env.PYPI_API_TOKEN }}
            packages_dir: ${{github.workspace}}/sdk/python/bin/dist
        - if: ${{ matrix.language == 'nodejs' && env.PUBLISH_NPM == 'true' }}
          uses: JS-DevTools/npm-publish@v1
          working-directory: pulumi-twingate
          with:
            access: "public"
            token: ${{ env.NPM_TOKEN }}
            package: ${{github.workspace}}/sdk/nodejs/bin/package.json
        - if: ${{ matrix.language == 'dotnet' && env.PUBLISH_NUGET == 'true' }}
          name: publish nuget package
          working-directory: pulumi-twingate
          run: |
            dotnet nuget push ${{github.workspace}}/sdk/dotnet/bin/Debug/*.nupkg -s ${{ env.NUGET_FEED_URL }} -k ${{ env.NUGET_PUBLISH_KEY }}
            echo "done publishing packages"
      strategy:
        fail-fast: false
        matrix:
          dotnetversion:
            - 3.1.301
          goversion:
            - "1.19"
          language:
            - nodejs
            - python
            - dotnet
            - go
          nodeversion:
            - 14.x
          pythonversion:
            - "3.9"
